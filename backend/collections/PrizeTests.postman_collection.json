{
	"info": {
		"_postman_id": "a05f0636-d565-4698-8da2-01f65819485a",
		"name": "Prize Tests",
		"description": "Colección de pruebas sobre el recurso Prize",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25917437"
	},
	"item": [
		{
			"name": "Crear una organización",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"organization_id_1\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Real Academia Sueca de Ciencias\",\r\n    \"tipo\": \"PRIVADA\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/organizations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"organizations"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea una nueva organización. El recurso tiene el atributo \"name\" que debe ser único. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear una organización 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"organization_id_2\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Real Academia de espanol\",\r\n    \"tipo\": \"PRIVADA\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/organizations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"organizations"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea una nueva organización. El recurso tiene el atributo \"name\" que debe ser único. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear un premio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"prize_id_1\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Hugo Award\",\r\n    \"description\": \"The Hugo Awards are a set of literary awards given annually for the best science fiction or fantasy works and achievements of the previous year.\",\r\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\r\n    \"organization\": {\r\n        \"id\": {{organization_id_1}},\r\n        \"name\": \"Real Academia Sueca de Ciencias\",\r\n        \"tipo\": \"PRIVADA\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo premio. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear un premio sin organización",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Organization is not valid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Hugo Award\",\r\n    \"description\": \"The Hugo Awards are a set of literary awards given annually for the best science fiction or fantasy works and achievements of the previous year.\",\r\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo premio pero con una organización que no existe. Verifica que se genera el error y el mensaje \"La organizacion es inválida\".\r\n\r\n**Código HTTP esperado: 412 Precondition failed\".**"
			},
			"response": []
		},
		{
			"name": "Crear un premio con una organización que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Organization is not valid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Hugo Award\",\r\n    \"description\": \"The Hugo Awards are a set of literary awards given annually for the best science fiction or fantasy works and achievements of the previous year.\",\r\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\r\n    \"organization\": {\r\n        \"id\": 0\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo premio pero con una organización que no existe. Verifica que se genera el error y el mensaje \"La organizacion es inválida\".\r\n\r\n**Código HTTP esperado: 412 Precondition failed\".**"
			},
			"response": []
		},
		{
			"name": "Crear un prize con una organización que ya tiene un premio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"Organization already holds a prize\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Varon Award\",\r\n    \"description\": \"The Varon Awards are a set of peace awards given monthly for the best peace book of the year.\",\r\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\r\n    \"organization\": {\r\n        \"id\": {{organization_id_1}},\r\n        \"name\": \"Real Academia Sueca de Ciencias\",\r\n        \"tipo\": \"PRIVADA\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo premio pero con una organización que ya tiene un premio. Verifica que se genera el error y el mensaje \"La organizacion ya tiene premio\".\r\n\r\n**Código HTTP esperado: 412 Precondition failed\".**"
			},
			"response": []
		},
		{
			"name": "Crear un premio 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"prize_id_2\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Varon Award\",\r\n    \"description\": \"The Varon Awards are a set of peace awards given monthly for the best peace book of the year.\",\r\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\r\n    \"organization\": {\r\n        \"id\": {{organization_id_2}},\r\n        \"name\": \"Real Academia de espanol\",\r\n        \"tipo\": \"PRIVADA\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nCrea un nuevo premio. El Id es inicializado por la BD y se debe ver en la respuesta. \r\n\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener todos los premios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of prizes > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/prizes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta todos los premios de la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nPara la prueba, se verifica que el conjunto de premios en la respuesta tenga mas de uno.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un premio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/prizes/{{prize_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"{{prize_id_1}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta un premio de la aplicación.  \r\nLa petición no tiene cuerpo.\r\nSe envía el id del premio deseado por la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un premio que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"The prize with the given id was not found\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/prizes/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta un premio que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /prizes/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Editar un premio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"The Hugo Awards are a set of literary awards given annually for the best science fiction or fantasy works and achievements of the previous year.\",\n    \"name\": \"Hugo Award\",\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\n    \"organization\": {\n        \"id\": {{organization_id_1}},\n        \"name\": \"Real Academia Sueca de Ciencias\",\n        \"tipo\": \"PRIVADA\"\n    }\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes/{{prize_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"{{prize_id_1}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nActualiza un premio existente. \r\nse envía el Id en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Editar un premio que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"The prize with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"The Hugo Awards are a set of literary awards given annually for the best science fiction or fantasy works and achievements of the previous year.\",\n    \"name\": \"Hugo Award\",\n    \"premiationDate\": \"2000-08-20T00:00:00-05:00\",\n    \"organization\": {\n        \"id\": {{organization_id_1}},\n        \"name\": \"Real Academia Sueca de Ciencias\",\n        \"tipo\": \"PRIVADA\"\n    }\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/prizes/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\nActualiza un premio que no existe. \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /prizes/0 no existe.\".\r\n\r\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar un premio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/prizes/{{prize_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"{{prize_id_1}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un premio. Se envía el id del premio creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un premio 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/prizes/{{prize_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"{{prize_id_2}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un premio. Se envía el id del premio creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un premio que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.apierror.message).to.eql(\"The prize with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/prizes/0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"prizes",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nBorra un premio que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /prizes/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar una organización",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/organizations/{{organization_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"organizations",
						"{{organization_id_1}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra una organización. Se envía el id de la organización creada anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar una organización 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/organizations/{{organization_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"organizations",
						"{{organization_id_2}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra una organización. Se envía el id de la organización creada anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}